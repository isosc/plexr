#!/usr/bin/env python3


import argparse
import os
import sys

from mpi4py import MPI
import numpy as np
import adios2
import plxr

from PIL import Image

## viewer.py
usage_msg = """Usage: plxr <operation> <op_args>

Where <operation> is one of the following:
    extract
    insert
    list
"""

def commandline (argv):
    parser = argparse.ArgumentParser(prog='plxr')
    subparsers = parser.add_subparsers(help='sub help', dest="subcommand")

    _parser_template = subparsers.add_parser('list', help="List images in a bp file")
    _parser_template.add_argument('bpfile')

    _parser_template = subparsers.add_parser('insert', help="Add image to a bp file. Create bp file if necessary.")
    _parser_template.add_argument('bpfile')
    _parser_template.add_argument('image_file')
    _parser_template.add_argument('image_name')

    _parser_template = subparsers.add_parser('extract', help="Extract image from a bp file.")
    _parser_template.add_argument('bpfile')
    _parser_template.add_argument('image_name')
    _parser_template.add_argument('--filename', required=False)


    return (parser.parse_args(argv[1:])) # Skip the program name, and pass the rest to the parser



def main(argv):

    config = commandline(argv)

    if config.subcommand == "list":
        do_list (config)
    elif config.subcommand == "extract":
        do_extract(config)
    elif config.subcommand == "insert":
        do_insert(config)
    else:
        print ("unknown command, exiting")

def do_list(config):

    comm = MPI.COMM_SELF
    with adios2.open(config.bpfile, "r", comm) as fh:
        # Query available images
        names = plxr.get_image_names_hl (fh)
        for name in names:
            print (name)


def do_insert(config):

    comm = MPI.COMM_SELF
    if os.path.isfile(config.bpfile):
        mode_char = 'a'
    else:
        mode_char = 'w'
    with adios2.open(config.bpfile, mode_char, comm) as fh:
        # Load image
        img = Image.open (config.image_file).convert("RGB")
        plxr.write_png_image_hl (fh, img, config.image_name, end_step=True)


# Assumes all steps have this image, need to revisit if not true...
def do_extract(config):
    step = 0
    comm = MPI.COMM_SELF

    #Open the bpfile
    with adios2.open(config.bpfile, "r", comm) as fh:
        for ad_step in fh:
            pimg = plxr.read_image_hl (ad_step, config.image_name)
            image_prefix = config.filename if config.filename else config.image_name
            pimg.save("%s_%i.png"%(image_prefix, step) )
            step = step + 1



if __name__ == "__main__":
    main(sys.argv)
